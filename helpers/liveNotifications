const { default: axios } = require('axios');
const { EmbedBuilder, ContextMenuCommandBuilder } = require('discord.js');
const twitch = require('axios').default;
const {readFileSync, promises: fsPromises} = require('fs');

twitch.defaults.baseURL = 'https://api.twitch.tv/helix'
twitch.defaults.headers.common['Authorization'] = 'Bearer pm2cmmnxkw0oxpvhbbrzyy8xisccy0';
twitch.defaults.headers.common['Client-id'] = '6oqct6k04iuw0ssjlrt4ejurhodcbz';

const streamerNamesFile = "./resources/streamerNames.txt";
const CHANNEL_NAME_STRING = 'stream-notifications';
const STREAMS = "Streams";
const USERS = "Users";
const TWITCH_URL_BASE = 'https://twitch.tv/';
const HEIGHT= '288';
const WIDTH = '512';


function syncReadFile(filename) {
	const contents = readFileSync(filename, 'utf-8');
	const arr = contents.split(/\r?\n/);
	return arr;
}

function parseStreamerNameArray(streamerArray, typeOfGetCall) {
    let returnString;
    switch (typeOfGetCall) {
        case STREAMS:
            returnString = "/streams";
                if (streamerArray.length != 0) {
                    for (let streamer of streamerArray) {
                        if (streamer == streamerArray[0]) {
                            returnString += "?user_login=" + streamer;
                        } else {
                            returnString += "&user_login=" + streamer;
                        }
                    }
                }
            break;
        case USERS:
            returnString = "/users";
                if (streamerArray.length != 0) {
                    for (let streamer of streamerArray) {
                        if (streamer == streamerArray[0]) {
                            returnString += "?login=" + streamer;
                        } else {
                            returnString += "&login=" + streamer;
                        }
                    }
                }
 
        }
    return returnString;
}

async function getStreamData(typeOfGetCall){
    const streamerNameArray = syncReadFile(streamerNamesFile);
    const URLParamString = parseStreamerNameArray(streamerNameArray, typeOfGetCall);
    const liveResult = await axios.get(URLParamString);
    return liveResult.data.data;
}

function buildEmbedArray(streamerData, userData) {
    let embedArray = [];
    for (let stream of streamerData) {

        const dateLive = new Date(stream.started_at);
        const currentTime = new Date();

        if (currentTime - dateLive < (70 * 1000)) {
            const user = getRelevantUser(stream, userData);
            const streamThumbnail = stream.thumbnail_url.replace("{width}", WIDTH).replace("{height}", HEIGHT);

            const embed = new EmbedBuilder()
                .setColor(0xA020F0)
                .setTitle(stream.title)
                .setURL(TWITCH_URL_BASE + user.login)
                .setAuthor({
                    name: user.display_name + " just went live!",
                    iconURL: user.profile_image_url,
                    url: TWITCH_URL_BASE + user.login
                })
                .setDescription((user.description.length >= 1) ? user.description : 'No description')
                .setThumbnail(user.profile_image_url)
                .addFields(
                    { name: 'Category', value: stream.game_name, inline: true },
                    { name: 'Started at', value: stream.started_at, inline: true }
                )
                .setImage(streamThumbnail)
                .setTimestamp()
                .setFooter({ text: 'BeanBot made by Dunstan Wang', iconURL: user.profile_image_url });

            embedArray.push(embed);
        } 
    }
    return embedArray;
}

function getRelevantUser(streamer, userData) {
    for (let user of userData) {
        if (streamer.user_login == user.login) {
            return user;
        }
    }
    console.error("missing user");
}

module.exports = {
    name: 'checkLive',
    async execute(client) {
        const liveStreamerData = await getStreamData(STREAMS);
        
        const liveUserData = await getStreamData(USERS);
        const embedArray = buildEmbedArray(liveStreamerData, liveUserData);
        const channel = client.channels.cache.find(channel => channel.name === CHANNEL_NAME_STRING);
        if (embedArray.length == 0) {
        } else {
            for (let embed of embedArray) {
                if (embed === embedArray[0]) {
                    await channel.send({ embeds: [embed] });
                } else {
                    await channel.send({ embeds: [embed] });
                }         
            }
        }
    }
}


